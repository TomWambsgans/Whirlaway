WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

// Program structure
program = { SOI ~ constant_declaration* ~ function+ ~ EOI }

// Constants
constant_declaration = { "const" ~ identifier ~ "=" ~ number ~ ";" }

// Functions
function = { "fn" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ return_count? ~ "{" ~ statement* ~ "}" }
parameter_list = { identifier ~ ("," ~ identifier)* }
return_count = { "->" ~ number }

// Statements
statement = {
    single_assignment |
    raw_memory_access |
    array_access |
    array_assign |
    if_statement |
    for_statement |
    return_statement |
    function_call |
    assert_eq_statement |
    assert_not_eq_statement
}

return_statement = { "return" ~ (tuple_expression)? ~ ";" }
tuple_expression = { var_or_constant ~ ("," ~ var_or_constant)* }

single_assignment = { identifier ~ "=" ~ expression ~ ";" }

raw_memory_access = { identifier ~ "=" ~ "memory" ~ "[" ~ var_or_constant ~ "]" ~ ";" }

array_access = { identifier ~ "=" ~ identifier ~ "[" ~ var_or_constant ~ "]" ~ ";" }
array_assign = { identifier ~ "[" ~ var_or_constant ~ "]" ~ "=" ~ var_or_constant ~ ";" }

if_statement = { "if" ~ condition ~ "{" ~ statement* ~ "}" ~ else_clause? }

condition = {condition_eq | condition_diff}
condition_eq = { var_or_constant ~ "==" ~ var_or_constant }
condition_diff = { var_or_constant ~ "!=" ~ var_or_constant }

else_clause = { "else" ~ "{" ~ statement* ~ "}" }

for_statement = { "for" ~ identifier ~ "in" ~ var_or_constant ~ ".." ~ var_or_constant ~ "{" ~ statement* ~ "}" }

function_call = { function_res? ~ identifier ~ "(" ~ var_list? ~ ")" ~ ";" }
function_res = { var_list ~ "=" }
var_list = { var_or_constant ~ ("," ~ var_or_constant)* }

assert_eq_statement = { "assert" ~ var_or_constant ~ "==" ~ var_or_constant ~ ";" }
assert_not_eq_statement = { "assert" ~ var_or_constant ~ "!=" ~ var_or_constant ~ ";" }

// Expressions
expression = { binary_expression | var_or_constant }
binary_expression = { var_or_constant ~ binary_operator ~ var_or_constant }
binary_operator = { "+" | "*" | "-" | "/" }

// Basic elements
var_or_constant = {  constant_value | identifier }
constant_value = { number | "public_input_start" }

// Lexical elements
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ ASCII_DIGIT+ }